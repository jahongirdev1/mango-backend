import traceback
from datetime import datetime

import ujson
from pymongo import ReturnDocument
from sanic import response
from sanic.views import HTTPMethodView

from core import i18n
from core.cache import cache
from core.db import mongo
from data.repository.catalog import on_catalog, on_selected
from data.repository.goods import ControlGoodsRepository

# data = {
#     'update_id': 929199204,
#     'message': {
#         'message_id': 136300,
#         'from': {'id': 702160070, 'is_bot': False, 'first_name': 'Mirzafar',
#                  'username': 'm1rzafar', 'language_code': 'en'},
#         'chat': {'id': 702160070, 'first_name': 'Mirzafar', 'username': 'm1rzafar',
#                  'type': 'private'}, 'date': 1747564438, 'text': 'dawd'
#     }
# }

# callback = {
#     'update_id': 238283914,
#     'callback_query': {
#         'id': '3015754537387908053',
#         'from': {
#             'id': 702160070, 'is_bot': False,
#             'first_name': 'Mirzafar', 'username': 'm1rzafar',
#             'language_code': 'en'},
#         'message': {'message_id': 94,
#                     'from': {
#                         'id': 7166723089,
#                         'is_bot': True,
#                         'first_name': '–•–ª–µ–±–æ–î–æ—Å—Ç–∞–≤–∫–∞',
#                         'username': 'Bread_delivery_bot'},
#                     'chat': {
#                         'id': 702160070,
#                         'first_name': 'Mirzafar',
#                         'username': 'm1rzafar',
#                         'type': 'private'},
#                     'date': 1747586030,
#                     'text': '–ö–∞—Ä–∑–∏–Ω–∫–∞ –ø—É—Å—Ç–æ. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖB—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"',
#                     'reply_markup': {
#                         'inline_keyboard': [
#                             [{
#                                 'text': '‚úÖB—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç',
#                                 'callback_data': 'chooseGoods'}]]}},
#         'chat_instance': '-8321419619944981968', 'data': 'chooseGoods'}}

MAPPING_STATES = {
    'new': '–ü–æ—Å—Ç—É–ø–∏–ª',
    'access': '–û–¥–æ–±—Ä–µ–Ω–æ',
    'finish': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
}


def validate_phone(value: str):
    if value.startswith('7') or value.startswith('8'):
        if len(value) == 11:
            return value
        else:
            return None

    elif value.startswith('+'):
        if len(value) == 12:
            return value
        else:
            return None

    return None


class TelegramWebhookView(HTTPMethodView):
    async def post(self, request):
        try:
            data = request.json or {}
            print(f'TelegramWebhookView.post: {data}')

            message = data.get('message')
            callback_data = data.get('callback_query', {}).get('data')

            text, chat_id = None, None

            if message:
                chat_id = message.get('chat', {}).get('id')
            elif data.get('callback_query', {}).get('message', {}).get('chat', {}).get('id'):
                chat_id = data['callback_query']['message']['chat']['id']

            if message and message.get('text') == '/start':
                await cache.delete(
                    f'bread:selectGood:{chat_id}',
                    f'bread:{chat_id}:finish:state'
                )
                return response.json({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': i18n.GREETING_BOT,
                    'reply_markup': {
                        'keyboard': [
                            ['\u2063üìî–ö–∞—Ç–∞–ª–æ–≥'],
                            ['\u2062üì¶–ó–∞–∫–∞–∑–∞—Ç—å'],
                            ['\u2061üóÉ–ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
                            ['\u2064üöö–ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ'],
                        ],
                        'resize_keyboard': True,
                        'one_time_keyboard': True,
                        'selective': True
                    }
                })

            if message and message.get('text'):
                text = message['text']

            elif message and message.get('caption'):
                text = message['caption']

            if not text and not callback_data:
                return response.json({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': i18n.PLEASE_WRITE
                })

            if f_state := await cache.get(f'bread:{chat_id}:finish:state'):
                if f_state == 'address':
                    if text:
                        await cache.set(f'bread:{chat_id}:finish:state', 'phone')
                        await cache.set(f'bread:{chat_id}:address', text)
                        return response.json({
                            'method': 'sendMessage',
                            'chat_id': chat_id,
                            'text': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                        })
                    else:
                        return response.json({
                            'method': 'sendMessage',
                            'chat_id': chat_id,
                            'text': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å',
                        })

                elif f_state == 'phone':
                    if text and validate_phone(text):
                        basket = await cache.get(f'bread:{chat_id}:basket')
                        address = await cache.get(f'bread:{chat_id}:address')
                        await cache.delete(
                            f'bread:{chat_id}:finish:state',
                            f'bread:{chat_id}:basket',
                            f'bread:selectGood:{chat_id}',
                            f'bread:{chat_id}:address'
                        )
                        counter = await mongo.counters.find_one_and_update(
                            filter={'collection': 'orders'},
                            update={'$inc': {'seq': 1}},
                            upsert=True,
                            return_document=ReturnDocument.AFTER
                        )
                        await mongo.orders.insert_one({
                            'created_at': datetime.now(),
                            'id': counter['seq'],
                            'chat_id': chat_id,
                            'items': basket and ujson.loads(basket) or None,
                            'address': address,
                            'phone': text
                        })
                        return response.json({
                            'method': 'sendMessage',
                            'chat_id': chat_id,
                            'text': f'–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω. –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{counter["seq"]}',
                            'reply_markup': {
                                'keyboard': [
                                    ['\u2063üìî–ö–∞—Ç–∞–ª–æ–≥'],
                                    ['\u2062üì¶–ó–∞–∫–∞–∑–∞—Ç—å'],
                                    ['\u2061üóÉ–ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
                                    ['\u2064üöö–ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ'],
                                ],
                                'resize_keyboard': True,
                                'one_time_keyboard': True,
                                'selective': True
                            }
                        })
                    else:
                        return response.json({
                            'method': 'sendMessage',
                            'chat_id': chat_id,
                            'text': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                        })

            if good_id := await cache.get(f'bread:selectGood:{chat_id}'):
                goods = await ControlGoodsRepository.get_goods()
                good = goods[good_id]
                count = text and text.isdigit() and int(text)
                if count and count > 0:
                    bsk = await cache.get(f'bread:{chat_id}:basket')
                    if bsk:
                        bsk = ujson.loads(bsk)
                    else:
                        bsk = []

                    basket = []
                    for b in bsk:
                        if b['title'] == good['title']:
                            pass
                        else:
                            basket.append(b)

                    basket.append({'title': good['title'], 'count': count, 'sum': count * (good['price'] or 0)})

                    inline_keyboard = [[{'text': '‚úÖB—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç', 'callback_data': 'chooseGoods'}],
                                       [{'text': 'üóë–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'callback_data': 'clearBasket'}],
                                       [{'text': 'üí≥–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'callback_data': 'doneBasket'}]]

                    response_text = '–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n\n'
                    total_sum = 0
                    for g in basket:
                        response_text += f'{g["title"]}: {g["count"]}\n'
                        if g.get('sum'):
                            total_sum += g['sum']

                    response_text += f'\n\n–ö –æ–ø–ª–∞—Ç–µ: {total_sum}'

                    await cache.delete(f'bread:selectGood:{chat_id}')
                    await cache.set(f'bread:{chat_id}:basket', ujson.dumps(basket))

                    return response.json({
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'text': response_text,
                        'reply_markup': {
                            'inline_keyboard': inline_keyboard
                        }
                    })

                else:
                    return response.json({
                        'method': 'sendMessage',
                        'chat_id': chat_id,
                        'parse_mode': 'Markdown',
                        'text': f'–í—ã–±—Ä–∞–ª–∏ *{good["title"]}*. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                    })

            if text and text.startswith('\u2063'):
                return response.json(await on_catalog(chat_id))

            if text and text.startswith('\u2064'):
                return response.json({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': '–≠–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ ‚Äî —Å–æ–±–∏—Ä–∞–π—Ç–µ –∑–∞–∫–∞–∑ –æ—Ç 3 000 —Ç–µ–Ω–≥–µ, –∏ –º—ã –ø—Ä–∏–≤–µ–∑–µ–º –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.',
                    'reply_markup': {
                        'keyboard': [
                            ['\u2063üìî–ö–∞—Ç–∞–ª–æ–≥'],
                            ['\u2062üì¶–ó–∞–∫–∞–∑–∞—Ç—å'],
                            ['\u2061üóÉ–ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
                            ['\u2064üöö–ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ'],
                        ],
                        'resize_keyboard': True,
                        'one_time_keyboard': True,
                        'selective': True
                    }
                })

            if text and text.startswith('\u2061'):
                orders = await mongo.orders.find({'chat_id': chat_id}).sort('_id', -1).to_list(None)
                if not orders:
                    return response.json({
                        'method': 'sendMessage',
                        'text': '–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–∫–∞–∑–æ–≤',
                        'reply_markup': {
                            'keyboard': [
                                ['\u2063üìî–ö–∞—Ç–∞–ª–æ–≥'],
                                ['\u2062üì¶–ó–∞–∫–∞–∑–∞—Ç—å'],
                                ['\u2061üóÉ–ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
                                ['\u2064üöö–ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ'],
                            ],
                            'resize_keyboard': True,
                            'one_time_keyboard': True,
                            'selective': True
                        }
                    })

                orders = orders[:15]
                return response.json({
                    'method': 'sendMessage',
                    'text': '–ó–∞–∫–∞–∑—ã',
                    'chat_id': chat_id,
                    'reply_markup': {
                        'inline_keyboard': [
                            [
                                {'text': f'–ó–∞–∫–∞–∑ #{o["id"]}', 'callback_data': f'order:selected:{o["id"]}'}
                            ] for o in orders
                        ]
                    }
                })

            if text and text.startswith('\u2062'):
                basket = await cache.get(f'bread:{chat_id}:basket')
                if basket:
                    basket = ujson.loads(basket)

                inline_keyboard = [[{'text': '‚úÖB—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç', 'callback_data': 'chooseGoods'}]]
                if basket:
                    response_text = '–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n\n'
                    inline_keyboard.extend([
                        [{'text': 'üóë–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', 'callback_data': 'clearBasket'}],
                        [{'text': 'üí≥–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'callback_data': 'doneBasket'}],
                    ])
                    for g in basket:
                        response_text += f'{g["title"]}: {g["count"]}\n'
                else:
                    response_text = '–ö–∞—Ä–∑–∏–Ω–∫–∞ –ø—É—Å—Ç–æ. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖB—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"'

                return response.json({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': response_text,
                    'reply_markup': {
                        'inline_keyboard': inline_keyboard
                    }
                })

            if callback_data and callback_data == 'chooseGoods':
                goods = await ControlGoodsRepository.get_goods()

                return response.json({
                    'method': 'editMessageText',
                    'message_id': data.get('callback_query', {}).get('message', {}).get('message_id') or None,
                    'chat_id': chat_id,
                    'text': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä',
                    'reply_markup': {
                        'inline_keyboard': [
                            [{'text': c['title'], 'callback_data': f'selectGood:{c["id"]}'}] for c in goods.values()
                        ]
                    }
                })

            elif callback_data and callback_data.startswith('selectGood'):
                goods = await ControlGoodsRepository.get_goods()
                good = goods[callback_data.split(':')[1]]
                await cache.set(f'bread:selectGood:{chat_id}', good['id'])
                message_id = data.get('callback_query', {}).get('message', {}).get('message_id')
                return response.json({
                    'method': message_id and 'editMessageText' or 'sendMessage',
                    'message_id': message_id,
                    'chat_id': chat_id,
                    'parse_mode': 'Markdown',
                    'text': f'–í—ã–±—Ä–∞–ª–∏ *{good["title"]}*. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                })

            elif callback_data and callback_data.startswith('clearBasket'):
                await cache.delete(f'bread:{chat_id}:basket', f'bread:selectGood:{chat_id}')
                message_id = data.get('callback_query', {}).get('message', {}).get('message_id')
                return response.json({
                    'method': message_id and 'editMessageText' or 'sendMessage',
                    'chat_id': chat_id,
                    'message_id': message_id,
                    'text': '–ö–∞—Ä–∑–∏–Ω–∫–∞ –ø—É—Å—Ç–æ. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖB—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç"',
                    'reply_markup': {
                        'inline_keyboard': [[{'text': '‚úÖB—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç', 'callback_data': 'chooseGoods'}]]
                    }
                })

            elif callback_data and callback_data.startswith('doneBasket'):
                await cache.delete(f'bread:selectGood:{chat_id}')
                await cache.set(f'bread:{chat_id}:finish:state', 'address')
                message_id = data.get('callback_query', {}).get('message', {}).get('message_id')
                return response.json({
                    'method': message_id and 'editMessageText' or 'sendMessage',
                    'chat_id': chat_id,
                    'message_id': message_id,
                    'text': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å',
                })

            elif callback_data and callback_data.startswith('catalog:select'):
                return response.json(await on_selected(chat_id, callback_data.split(':')[2]))

            elif callback_data and callback_data.startswith('order:selected'):
                order_id = callback_data.split(':')[2]
                order = await mongo.orders.find_one({'id': int(order_id)})
                if not order:
                    return response.json({
                        'method': 'editMessageText',
                        'chat_id': chat_id,
                        'message_id': data.get('callback_query', {}).get('message', {}).get('message_id') or None,
                        'text': f'–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                        'reply_markup': {
                            'keyboard': [
                                ['\u2063üìî–ö–∞—Ç–∞–ª–æ–≥'],
                                ['\u2062üì¶–ó–∞–∫–∞–∑–∞—Ç—å'],
                                ['\u2061üóÉ–ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
                                ['\u2064üöö–ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ'],
                            ],
                            'resize_keyboard': True,
                            'one_time_keyboard': True,
                            'selective': True
                        }
                    })

                response_text = f'–ó–∞–∫–∞–∑ #{order_id}\n\n'
                total_sum = 0
                for i in order['items']:
                    if i.get('sum'):
                        total_sum += i['sum']
                    response_text += f'{i["title"]}: {i["count"]}\n'

                response_text += f'\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_sum} —Ç–µ–Ω–≥–µ'
                response_text += f'\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {MAPPING_STATES.get(order.get("state", "new"))}'

                return response.json({
                    'method': 'sendMessage',
                    'chat_id': chat_id,
                    'text': response_text,
                    'reply_markup': {
                        'keyboard': [
                            ['\u2063üìî–ö–∞—Ç–∞–ª–æ–≥'],
                            ['\u2062üì¶–ó–∞–∫–∞–∑–∞—Ç—å'],
                            ['\u2061üóÉ–ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
                            ['\u2064üöö–ò–Ω—Ñ–æ –æ –¥–æ—Å—Ç–∞–≤–∫–µ'],
                        ],
                        'resize_keyboard': True,
                        'one_time_keyboard': True,
                        'selective': True
                    }
                })


        except (Exception,):
            traceback.print_exc()

        return response.json({})
